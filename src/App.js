import React, { useState, useEffect } from 'react';
import { Menu } from 'lucide-react';
import './App.css';
import Sidebar from './components/Sidebar';
import ChatArea from './components/ChatArea';
import LoginForm from './components/LoginForm';
import KanbanBoard from './components/KanbanBoard';
import ModelSelectorModal from './components/ModelSelectorModal';
import { back_url } from './Links';
import ConnectionTest from './components/ConnectionTest';
// –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏
// import HowToUse from './components/HowToUse';
// import Help from './components/Help';

function App() {
  const [user, setUser] = useState(null);
  const [chats, setChats] = useState([]);
  const [currentChat, setCurrentChat] = useState(null);
  const [currentPage, setCurrentPage] = useState('chat');
  const [models, setModels] = useState([]); // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–æ–¥–µ–ª–µ–π
  const [selectedModelId, setSelectedModelId] = useState(null); // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
  const [isModelSelectorOpen, setIsModelSelectorOpen] = useState(false); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –º–µ–Ω—é

  // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–∫—É –¥–ª—è currentChat
  useEffect(() => {
    console.log('üîÑ App.js: currentChat –∏–∑–º–µ–Ω–∏–ª—Å—è:', currentChat);
  }, [currentChat]);

  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ)
  /*
  const handlePageChange = (newPage) => {
    console.log(`üîÑ –°–º–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${currentPage} ‚Üí ${newPage}`);
    setCurrentPage(newPage);
  };
  */

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const savedUser = localStorage.getItem('user');
    if (savedUser) {
      const userData = JSON.parse(savedUser);
      setUser(userData);
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏ –∏ —á–∞—Ç—ã —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      loadModels(userData.id);
      loadChats(userData.id);
    }
  }, []); // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π - –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—É—é –º–æ–¥–µ–ª—å –∫–∞–∫ –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  useEffect(() => {
    if (models.length > 0 && !selectedModelId) {
      console.log(`ü§ñ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ${models[0].model_name}`);
      setSelectedModelId(models[0].id);
    }
  }, [models, selectedModelId]);

  const loadModels = async (userId) => {
    try {
      const response = await fetch(`${back_url}/api/models?user_id=${userId}`);
      const data = await response.json();
      
      if (data.models) {
        setModels(data.models);
        console.log(`ü§ñ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: ${data.models.length}`);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π:', error);
    }
  };

  const loadChats = async (userId) => {
    try {
      const response = await fetch(`${back_url}/api/chats?user_id=${userId}`);
      const data = await response.json();
      
      // –ü—Ä–æ—Å—Ç–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —á–∞—Ç—ã –±–µ–∑ –≤—Å—è–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
      setChats(data.chats);
      console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ —á–∞—Ç–æ–≤: ${data.chats.length}`);
      
      // –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º currentChat –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–∞—Ç–æ–≤ - —ç—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ø–æ—Ç–µ—Ä–µ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
      // if (currentChat && !data.chats.find(chat => chat.id === currentChat.id)) {
      //   console.log('‚ö†Ô∏è –¢–µ–∫—É—â–∏–π —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º');
      //   setCurrentChat(null);
      // }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤:', error);
    }
  };

  const handleLogin = async (userData) => {
    setUser(userData);
    localStorage.setItem('user', JSON.stringify(userData));
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏ –∏ —á–∞—Ç—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ
    await loadModels(userData.id);
    await loadChats(userData.id);
  };

  const handleLogout = () => {
    setUser(null);
    setCurrentChat(null);
    setChats([]);
    localStorage.removeItem('user');
  };

  const createNewChat = async (userId) => {
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
    setIsModelSelectorOpen(true);
  };

  const handleModelSelect = async (modelId) => {
    try {
      console.log('üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç —Å –º–æ–¥–µ–ª—å—é ID:', modelId);
      
      const response = await fetch(`${back_url}/api/chats`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          user_id: user.id,
          title: '–ù–æ–≤—ã–π —á–∞—Ç',
          model_id: modelId
        }),
      });
      
      const newChat = await response.json();
      console.log('‚úÖ –ù–æ–≤—ã–π —á–∞—Ç —Å–æ–∑–¥–∞–Ω:', newChat);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —á–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∫ —Ç–µ–∫—É—â–∏–π
      setChats(prevChats => [newChat, ...prevChats]);
      setCurrentChat(newChat);
      
      // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –Ω–∞—á–∞–ª—É —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
      const chatsSection = document.querySelector('.chats-section');
      if (chatsSection) {
        chatsSection.scrollTop = 0;
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞:', error);
    }
  };

  const deleteChat = async (chatId) => {
    try {
      console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º —á–∞—Ç ID: ${chatId}`);
      const response = await fetch(`${back_url}/api/chats/${chatId}`, {
        method: 'DELETE',
      });
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const result = await response.json();
      console.log(`‚úÖ –ß–∞—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –ë–î:`, result);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
      setChats(chats.filter(chat => chat.id !== chatId));
      if (currentChat && currentChat.id === chatId) {
        setCurrentChat(null);
      }
      console.log(`‚úÖ –ß–∞—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–∞:', error);
    }
  };

  const updateChat = (chatId, updates) => {
    console.log(`üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —á–∞—Ç ID: ${chatId} —Å –¥–∞–Ω–Ω—ã–º–∏:`, updates);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —á–∞—Ç –≤ —Å–ø–∏—Å–∫–µ
    setChats(prevChats => 
      prevChats.map(chat => 
        chat.id === chatId ? { ...chat, ...updates } : chat
      )
    );
    
    // –û–±–Ω–æ–≤–ª—è–µ–º currentChat –µ—Å–ª–∏ —ç—Ç–æ –æ–Ω
    if (currentChat && currentChat.id === chatId) {
      setCurrentChat(prev => ({ ...prev, ...updates }));
    }
  };



  if (!user) {
    return <LoginForm onLogin={handleLogin} />;
  }

  return (
    <>
      {/* –ú–æ–±–∏–ª—å–Ω—ã–π –±—É—Ä–≥–µ—Ä - –≤—ã–Ω–æ—Å–∏–º –∏–∑ Sidebar */}
      <div className="mobile-burger">
        <button onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)} className="burger-btn">
          <Menu size={20} />
        </button>
      </div>
      
      <div className="app">
        <Sidebar
          user={user}
          chats={chats}
          currentChat={currentChat}
          currentPage={currentPage}
          onChatSelect={setCurrentChat}
          onNewChat={() => createNewChat(user.id)}
          onDeleteChat={deleteChat}
          onPageChange={setCurrentPage}
          onLogout={handleLogout}
          models={models}
          isMobileMenuOpen={isMobileMenuOpen}
          setIsMobileMenuOpen={setIsMobileMenuOpen}
        />
      {currentPage === 'chat' && (
        <ChatArea
          user={user}
          currentChat={currentChat}
          setCurrentChat={setCurrentChat}
          onChatUpdate={() => loadChats(user.id)}
          onNewChat={() => createNewChat(user.id)}
          updateChat={updateChat}
          models={models}
        />
      )}
      {currentPage === 'kanban' && (
        <KanbanBoard user={user} />
      )}
      {currentPage === 'test' && (
        <ConnectionTest />
      )}
      {/* –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏
      {currentPage === 'how-to-use' && (
        <div>
          <div style={{padding: '20px', background: '#f0f0f0', margin: '10px'}}>
            <strong>DEBUG:</strong> –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {currentPage}
          </div>
          <HowToUse />
        </div>
      )}
      {currentPage === 'help' && (
        <div>
          <div style={{padding: '20px', background: '#f0f0f0', margin: '10px'}}>
            <strong>DEBUG:</strong> –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {currentPage}
          </div>
          <Help />
        </div>
      )}
      */}

      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ - –≤—ã–Ω–æ—Å–∏–º –Ω–∞—Ä—É–∂—É */}
      <ModelSelectorModal
        isOpen={isModelSelectorOpen}
        models={models}
        onClose={() => setIsModelSelectorOpen(false)}
        onModelSelect={handleModelSelect}
        user={user}
      />
    </>
  );
}

export default App;
